{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7MfWJaSUrQmo"
      },
      "source": [
        "# Taller modelos lineales\n",
        "\n",
        "\n",
        "# Parte 1 - Regresión lineal\n",
        "\n",
        "Estimar una regresión con los datos de ingresos\n",
        "\n",
        "\n",
        "## Previsión de ingresos\n",
        "\n",
        "Vamos a trabajar con un conjunto de datos del censo de EE.UU. indome ([diccionario de datos](https://archive.ics.uci.edu/ml/datasets/Adult))\n",
        "\n",
        "A muchas empresas les gustaría personalizar su oferta en función de los ingresos del cliente. Los clientes con ingresos elevados podrían, por ejemplo, estar expuestos a productos premium. Como los ingresos de un cliente no siempre se conocen explícitamente, el modelo predictivo podría estimar los ingresos de una persona basándose en otra información.\n",
        "\n",
        "Nuestro objetivo es crear un modelo predictivo que sea capaz de dar una estimación de los ingresos de una persona.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "eK62OxWerQmx",
        "outputId": "4a85523b-41b2-41c9-da93-9d2f48fe13f3"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# read the data and set the datetime as the index\n",
        "income = pd.read_csv('https://github.com/albahnsen/PracticalMachineLearningClass/raw/master/datasets/income.csv.zip', index_col=0)\n",
        "\n",
        "income.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age         Workclass  fnlwgt  Education  Education-Num  \\\n",
              "0   39         State-gov   77516  Bachelors             13   \n",
              "1   50  Self-emp-not-inc   83311  Bachelors             13   \n",
              "2   38           Private  215646    HS-grad              9   \n",
              "3   53           Private  234721       11th              7   \n",
              "4   28           Private  338409  Bachelors             13   \n",
              "\n",
              "       Martial Status         Occupation   Relationship   Race     Sex  \\\n",
              "0       Never-married       Adm-clerical  Not-in-family  White    Male   \n",
              "1  Married-civ-spouse    Exec-managerial        Husband  White    Male   \n",
              "2            Divorced  Handlers-cleaners  Not-in-family  White    Male   \n",
              "3  Married-civ-spouse  Handlers-cleaners        Husband  Black    Male   \n",
              "4  Married-civ-spouse     Prof-specialty           Wife  Black  Female   \n",
              "\n",
              "   Capital Gain  Capital Loss  Hours per week        Country   Income  \n",
              "0          2174             0              40  United-States  51806.0  \n",
              "1             0             0              13  United-States  68719.0  \n",
              "2             0             0              40  United-States  51255.0  \n",
              "3             0             0              40  United-States  47398.0  \n",
              "4             0             0              40           Cuba  30493.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3378d6bd-91ce-434d-ac46-ac7bd88ecf5d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Workclass</th>\n",
              "      <th>fnlwgt</th>\n",
              "      <th>Education</th>\n",
              "      <th>Education-Num</th>\n",
              "      <th>Martial Status</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Relationship</th>\n",
              "      <th>Race</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Capital Gain</th>\n",
              "      <th>Capital Loss</th>\n",
              "      <th>Hours per week</th>\n",
              "      <th>Country</th>\n",
              "      <th>Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39</td>\n",
              "      <td>State-gov</td>\n",
              "      <td>77516</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>2174</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>51806.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>83311</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>United-States</td>\n",
              "      <td>68719.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>215646</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>51255.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53</td>\n",
              "      <td>Private</td>\n",
              "      <td>234721</td>\n",
              "      <td>11th</td>\n",
              "      <td>7</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>47398.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28</td>\n",
              "      <td>Private</td>\n",
              "      <td>338409</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>Black</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>Cuba</td>\n",
              "      <td>30493.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3378d6bd-91ce-434d-ac46-ac7bd88ecf5d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3378d6bd-91ce-434d-ac46-ac7bd88ecf5d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3378d6bd-91ce-434d-ac46-ac7bd88ecf5d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZvEW_YjhrQm2",
        "outputId": "c26d1526-6be4-4f48-af04-b1b5517c6442"
      },
      "source": [
        "income.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32561, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oHu8-0bSrQm4"
      },
      "source": [
        "## Ejercicio 4.1 \n",
        "\n",
        "¿Cuál es la relación entre la edad y la renta?\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1jJabJiPrQm4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "6db03660-64e9-4a5c-f585-3ae7a7c6804d"
      },
      "source": [
        "income.plot(x='Age', y='Income', kind='scatter')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4ef1bf0990>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "No existe una relación entre la edad y la renta. <BR> Se observa que la mayor parte de los datos se concentra en las edades entre 20 y 60 años, además que no hay una renta especìfica para un grupo de edad determinado."
      ],
      "metadata": {
        "id": "f7Vba2iHk9Fz"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dHBpky16lKCt"
      },
      "source": [
        "## Ejercicio 4.2\n",
        "Para un aumento del uno por ciento en la edad, ¿cuánto aumenta la renta?\n",
        "Utilizando sklearn estime una regresión lineal y prediga los ingresos cuando la Edad es de 30 y 40 años."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PjSkhX8TlSxq"
      },
      "source": [
        "from scipy.stats import pearsonr\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = income[['Age']]\n",
        "y = income['Income']\n",
        "\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X = X, y = y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HWqevp0pmpik",
        "outputId": "75cebf48-91f7-45a0-bc7c-78c5cca686eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Intercept:\", modelo.intercept_)\n",
        "print(\"Coeficiente:\", list(zip(X.columns, modelo.coef_.flatten(), )))\n",
        "print(\"Coeficiente de determinación R^2:\", modelo.score(X, y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hyLCgvQ2nGtk",
        "outputId": "0df30e25-3993-460d-e4b3-31c8ffd9dd60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercept: 32538.088130868626\n",
            "Coeficiente: [('Age', 542.1676570723878)]\n",
            "Coeficiente de determinación R^2: 0.08433697954867103\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El modelo obtenido es: <BR>\n",
        "y_est = 32538.088130868626 + 542.1676570723878*edad <BR>\n",
        "Se concluye que el aumento de uno por ciento en la edad aumenta el ingreso en 542.1676570723878 unidades."
      ],
      "metadata": {
        "id": "OaqGwEAxpQGE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "income_30 = 32538.088130868626 + (542.1676570723878*30)\n",
        "income_40 = 32538.088130868626 + (542.1676570723878*40)\n",
        "result = {'Edad 30': income_30, 'Edad 40': income_40}\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IeyJxpZonLAC",
        "outputId": "98c3c013-f6cf-45e9-9d2d-63596e2f383e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Edad 30': 48803.11784304026, 'Edad 40': 54224.79441376413}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Con el modelo calculado, se obtiene que: <BR>\n",
        "* Para la edad de 30 años, el ingreso estimado es de 48803.11784304026\n",
        "* Para la edad de 30 años, el ingreso estimado es de 54224.79441376413"
      ],
      "metadata": {
        "id": "Bzm3nuzQpAAb"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1lDYrtbArQm7"
      },
      "source": [
        "\n",
        "## Ejercicio 4.3\n",
        "\n",
        "Ejecute un modelo de regresión utilizando como características la Edad y la Edad$^2$ utilizando las ecuaciones OLS. Prediga de nuevo los ingresos cuando la Edad es de 30 y 40 años, y compare con el modelo anterior."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "9oiQN-TArQm9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cfe1fd76-00da-4b9c-d55d-06883efbb877"
      },
      "source": [
        "income['Age2'] = income['Age']**2\n",
        "X = income[['Age','Age2']]\n",
        "y = income['Income']\n",
        "X = sm.add_constant(X, prepend=True)\n",
        "modelo = sm.OLS(endog=y, exog=X)\n",
        "modelo = modelo.fit()\n",
        "print(modelo.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                 Income   R-squared:                       0.160\n",
            "Model:                            OLS   Adj. R-squared:                  0.160\n",
            "Method:                 Least Squares   F-statistic:                     3103.\n",
            "Date:                Sat, 08 Oct 2022   Prob (F-statistic):               0.00\n",
            "Time:                        09:07:25   Log-Likelihood:            -3.7369e+05\n",
            "No. Observations:               32561   AIC:                         7.474e+05\n",
            "Df Residuals:                   32558   BIC:                         7.474e+05\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const      -1.623e+04    979.845    -16.559      0.000   -1.81e+04   -1.43e+04\n",
            "Age         3131.7701     48.713     64.290      0.000    3036.291    3227.250\n",
            "Age2         -30.5434      0.564    -54.197      0.000     -31.648     -29.439\n",
            "==============================================================================\n",
            "Omnibus:                     3399.349   Durbin-Watson:                   1.992\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             4584.165\n",
            "Skew:                           0.915   Prob(JB):                         0.00\n",
            "Kurtosis:                       3.166   Cond. No.                     1.55e+04\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 1.55e+04. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
            "  x = pd.concat(x[::order], 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El modelo estimado es: <BR>\n",
        "y_est = -1.623e+04 + 3131.7701*edad -30.5434*(edad^2) <BR>\n",
        "Se concluye que con el aumento del uno por cierto en la edad, el ingreso aumenta en 3131.7701 unidades, manteniendo la edad al cuadrado constante. <BR>\n",
        "Mientras que el aumento en uno por ciento en la edad al cuadrado, causa que el ingreso disminuya en 30.5434 unidades, manteniendo la edad constante."
      ],
      "metadata": {
        "id": "ww5lvMhk2ZUS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "income_30_2 = -1.623e+04+(3131.7701*30)+(-30.5434*(30**2))\n",
        "income_40_2 = -1.623e+04+(3131.7701*40)+(-30.5434*(40**2))\n",
        "result = {'Edad 30': income_30_2, 'Edad 40': income_40_2}\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1XagFIrCv0hv",
        "outputId": "261151d5-29ca-4efd-a7be-b617daa64be8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Edad 30': 50234.043000000005, 'Edad 40': 60171.36400000001}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculando por edades:\n",
        "* Para la edad de 30, el ingreso es: 50234.043000000005 \n",
        "* Para la edad de 40, el ingreso es: 60171.36400000001"
      ],
      "metadata": {
        "id": "z5TGMCA2uSxv"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tqH5f5bbrQm-"
      },
      "source": [
        "## Ejercicio 4.4\n",
        "Estime una regresión utilizando más características, diga cuáles y por qué las usó. Prediga de nuevo los ingresos cuando la Edad es de 30 y 40 años, y compare con el modelo anterior.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_cuan = income[['Age','fnlwgt','Education-Num','Capital Gain','Capital Loss','Hours per week','Income']]\n",
        "data_cuan.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "7rdE5Z-bzSNc",
        "outputId": "fb96eb92-0943-4fbc-f8c4-ec4b51677940"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Age    fnlwgt  Education-Num  Capital Gain  Capital Loss  \\\n",
              "Age             1.000000 -0.076646       0.036527      0.077674      0.057775   \n",
              "fnlwgt         -0.076646  1.000000      -0.043195      0.000432     -0.010252   \n",
              "Education-Num   0.036527 -0.043195       1.000000      0.122630      0.079923   \n",
              "Capital Gain    0.077674  0.000432       0.122630      1.000000     -0.031615   \n",
              "Capital Loss    0.057775 -0.010252       0.079923     -0.031615      1.000000   \n",
              "Hours per week  0.068756 -0.018768       0.148123      0.078409      0.054256   \n",
              "Income          0.290408 -0.014618       0.430757      0.214634      0.147597   \n",
              "\n",
              "                Hours per week    Income  \n",
              "Age                   0.068756  0.290408  \n",
              "fnlwgt               -0.018768 -0.014618  \n",
              "Education-Num         0.148123  0.430757  \n",
              "Capital Gain          0.078409  0.214634  \n",
              "Capital Loss          0.054256  0.147597  \n",
              "Hours per week        1.000000  0.283949  \n",
              "Income                0.283949  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7450220-1278-483c-80ee-bf449aa2193f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>fnlwgt</th>\n",
              "      <th>Education-Num</th>\n",
              "      <th>Capital Gain</th>\n",
              "      <th>Capital Loss</th>\n",
              "      <th>Hours per week</th>\n",
              "      <th>Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.076646</td>\n",
              "      <td>0.036527</td>\n",
              "      <td>0.077674</td>\n",
              "      <td>0.057775</td>\n",
              "      <td>0.068756</td>\n",
              "      <td>0.290408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fnlwgt</th>\n",
              "      <td>-0.076646</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.043195</td>\n",
              "      <td>0.000432</td>\n",
              "      <td>-0.010252</td>\n",
              "      <td>-0.018768</td>\n",
              "      <td>-0.014618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education-Num</th>\n",
              "      <td>0.036527</td>\n",
              "      <td>-0.043195</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.122630</td>\n",
              "      <td>0.079923</td>\n",
              "      <td>0.148123</td>\n",
              "      <td>0.430757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Capital Gain</th>\n",
              "      <td>0.077674</td>\n",
              "      <td>0.000432</td>\n",
              "      <td>0.122630</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.031615</td>\n",
              "      <td>0.078409</td>\n",
              "      <td>0.214634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Capital Loss</th>\n",
              "      <td>0.057775</td>\n",
              "      <td>-0.010252</td>\n",
              "      <td>0.079923</td>\n",
              "      <td>-0.031615</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.054256</td>\n",
              "      <td>0.147597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hours per week</th>\n",
              "      <td>0.068756</td>\n",
              "      <td>-0.018768</td>\n",
              "      <td>0.148123</td>\n",
              "      <td>0.078409</td>\n",
              "      <td>0.054256</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.283949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0.290408</td>\n",
              "      <td>-0.014618</td>\n",
              "      <td>0.430757</td>\n",
              "      <td>0.214634</td>\n",
              "      <td>0.147597</td>\n",
              "      <td>0.283949</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7450220-1278-483c-80ee-bf449aa2193f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7450220-1278-483c-80ee-bf449aa2193f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7450220-1278-483c-80ee-bf449aa2193f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Teniendo en cuenta las variables cualitativas se tendrán en cuenta las que tengan las correlaciones más altas con respecto al ingreso. <BR>\n",
        "Estas son:\n",
        "* Age (Edad)\n",
        "* Education-Num\n",
        "* Capital Gain (Plusvalía)\n",
        "* Hours per week (Horas por semana)"
      ],
      "metadata": {
        "id": "9ycQwXau0pyJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn\n",
        "data_cual = income[['Workclass','Education','Martial Status','Occupation','Relationship','Race','Sex','Country','Income']]\n",
        "fig, axes = plt.subplots(4, 2, figsize=(28, 20))\n",
        "seaborn.boxplot(ax=axes[0, 0], data=data_cual, x='Workclass',y='Income')\n",
        "seaborn.boxplot(ax=axes[0, 1], data=data_cual, x='Education',y='Income') \n",
        "seaborn.boxplot(ax=axes[1, 0], data=data_cual, x='Martial Status',y='Income')\n",
        "seaborn.boxplot(ax=axes[1, 1], data=data_cual, x='Occupation',y='Income') \n",
        "seaborn.boxplot(ax=axes[2, 0], data=data_cual, x='Relationship',y='Income')\n",
        "seaborn.boxplot(ax=axes[2, 1], data=data_cual, x='Race',y='Income')\n",
        "seaborn.boxplot(ax=axes[3, 0], data=data_cual, x='Sex',y='Income') \n",
        "seaborn.boxplot(ax=axes[3, 1], data=data_cual, x='Country',y='Income') \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "id": "tgrGguG4IZw1",
        "outputId": "002d5e54-8843-4fb3-b32c-41a7c5274b98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4ef0213950>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2016x1440 with 8 Axes>"
            ],
            "image/png": "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U/xo6beH/Pmujc8B0LRrcRW1z6x/itc1K48lg6MKIxEREZFhoufJld/EiRN58cUXi17Ppk2b2Lp1awkiKp0RI0YwduzQx/M2MyZOnFjCiEREatv6F2BJR3Hr2BhG82LX4kbzYv0L0LxPcesQEZHyK0WvqWcfDz24dmneqaj1vK75IPXikkFThZGIiIiI1IxS9VJatWoVmzdvLsm6SmXMmDFFV/ioF5eIVLI5c+bwxBNPFFzm8cfDkGmp1u25HHDAAUW3oi/ZsE0vh3ib9yluiLfmfTTEm4hINVDPPql2qjASERERkZpRab24RESktEaPHj0s36Nhm0RERCrTUy+t5eLbf1HUOp57+QUA9t6luOHZn3ppLQeV4Fm8lUQVRiIiIiIiIiKSuFJV0oiISO14ft2T3DjvoqLW8eJLzwKwx27Fje35/LonadxLPfaTVKretq8+vg6AnSYWV9lzEHvWXA9gVRiJiIiIiIiIiIiISEUpVUH8ixvCM4Ea9xpV1Hoa96rNZwI9teEZLrl7dlHreG7T8wDsPXZ80bEcxMF531cP4PJThZGIiIiIiIiIiIiIVBRVDpRf6Xrs9AKw035ji1rPQRxck5Vy1UQVRiIiIiIiIiJV5tn1zjVLeopaR/dGB6BxVys6lt2ai1qFiIiIJECVcpJNFUYiIiIiIiIiVaRULW+ff/xxAHZrPrCo9ezWXLqYRERERCQ5qjASERERERERqSJqDSwiIiIi5dCQdAAiIiIiIiIiIiIiIiKSLPUwEhERERERkWE1Z84cnnjiiYLLPB6HS0v1gsnngAMOKFmPGxERERGReqYKIxEREREREak4o0ePTjoEEREREZG6ogojERERERERGVbqESQiIiIiUnn0DCMREREREREREREREZE6pwojERERERERERERERGROqch6URERKSkrrjiCh577LGi1/Poo48CcOaZZxa9roMOOqgk6xERERERERERqVWqMBIREZGKNGbMmKRDEBERERERERGpG6owEhERkZJSTx4RERERKYU5c+bwxBNPFFzm8ccfB+Ccc84puNwBBxzAF77whZLFlku1xSsiIpJNFUYiIiIiVUbD/omIiIgEo0ePTjqEQam2eEVEpL4Me4WRme0HXA/sDThwtbv/wMzGAb8GJgErgY+7+wtmZsAPgA8Am4CZ7n5vXFcr8LW46ovcvS3O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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para la elección de las variables cualitativas, se graficaron los posibles boxplot teniendo en cuenta todas las variables cualitativas con respecto al ingreso. <BR>\n",
        "Se van a tener en cuenta aquellas que gráficamente muestren medias diferentes, puesto que a priori se puede considerar un modelo en donde se pueda estimar el ingreso y que este varía si, por ejemplo, se es hombre o mujer. <BR>\n",
        "Las variables escogidas son:\n",
        "* Education (Nivel educativo)\n",
        "* Occupation (Ocupación o cargo)\n",
        "* Sex (Hombre o mujer)\n",
        "* Country (País)"
      ],
      "metadata": {
        "id": "MpWtvG11Lwds"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dat = income[['Age','Education-Num','Capital Gain','Hours per week','Education','Occupation','Sex','Country']]\n",
        "dat = pd.get_dummies(dat)\n",
        "X = dat\n",
        "y = income['Income']\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X = X, y = y)\n",
        "print(\"Intercept:\", modelo.intercept_)\n",
        "print(\"Coeficiente:\", list(zip(X.columns, modelo.coef_.flatten(), )))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y9qVRRVRUPoj",
        "outputId": "f26fb663-177b-4cf7-85f4-cd5b89649664"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercept: -2795.831794355603\n",
            "Coeficiente: [('Age', 362.5051150624053), ('Education-Num', 2840.4462821977872), ('Capital Gain', 0.36004566725432596), ('Hours per week', 196.8202921179618), ('Education_10th', -2100.2152670499217), ('Education_11th', -4180.67674176276), ('Education_12th', -5819.193460762082), ('Education_1st-4th', 4831.204448858185), ('Education_5th-6th', 4664.206145736082), ('Education_7th-8th', -324.3249760788726), ('Education_9th', -1582.9451744908897), ('Education_Assoc-acdm', -8253.096324694136), ('Education_Assoc-voc', -4707.111850615234), ('Education_Bachelors', -2047.2712730318117), ('Education_Doctorate', 8884.04787709141), ('Education_HS-grad', -5462.190394598961), ('Education_Masters', 3700.387878256349), ('Education_Preschool', 7481.393227090576), ('Education_Prof-school', 10563.439828207423), ('Education_Some-college', -5647.653942157653), ('Occupation_Adm-clerical', 3229.8476046000164), ('Occupation_Armed-Forces', -511.1427527697153), ('Occupation_Craft-repair', 3583.603654089701), ('Occupation_Exec-managerial', 10390.9820425868), ('Occupation_Farming-fishing', -2625.857547070709), ('Occupation_Handlers-cleaners', -662.9970320678317), ('Occupation_Machine-op-inspct', 1833.6178255402779), ('Occupation_Other-service', 761.3255704415087), ('Occupation_Priv-house-serv', 1499.0582280623985), ('Occupation_Prof-specialty', 6650.848494253954), ('Occupation_Protective-serv', 6549.25887439049), ('Occupation_Sales', 4874.681677595338), ('Occupation_Tech-support', 6506.526693830683), ('Occupation_Transport-moving', 2042.5729345669279), ('Sex_Female', -10145.264961809276), ('Sex_Male', 10145.264961809178), ('Country_Cambodia', 7669.175997795173), ('Country_Canada', 2081.051568364963), ('Country_China', 610.0432827600989), ('Country_Columbia', -4280.675962610361), ('Country_Cuba', 1632.5702863402967), ('Country_Dominican-Republic', -1128.316137130069), ('Country_Ecuador', -456.4468725028247), ('Country_El-Salvador', 2580.2525554473877), ('Country_England', 1608.4535905087162), ('Country_France', 5590.757228427446), ('Country_Germany', 3361.1122406790178), ('Country_Greece', -2373.407180496149), ('Country_Guatemala', 121.6737265897591), ('Country_Haiti', 1064.3115652537927), ('Country_Holand-Netherlands', 3401.694684086553), ('Country_Honduras', 1732.770513074448), ('Country_Hong', 2504.540215465151), ('Country_Hungary', -4259.176472043645), ('Country_India', -1233.2327797066773), ('Country_Iran', 257.38545282101063), ('Country_Ireland', 2032.7191418172822), ('Country_Italy', 5599.198818074663), ('Country_Jamaica', -352.7292922481632), ('Country_Japan', 3564.6699198371844), ('Country_Laos', 301.55790474169953), ('Country_Mexico', 841.8702606086181), ('Country_Nicaragua', 795.3209418904712), ('Country_Outlying-US(Guam-USVI-etc)', -6891.1874796808215), ('Country_Peru', -2088.7436936405315), ('Country_Philippines', 3737.712460435502), ('Country_Poland', -370.0232426587477), ('Country_Portugal', -109.6986028076119), ('Country_Puerto-Rico', 190.59637051222126), ('Country_Scotland', 2343.638891677749), ('Country_South', -4727.919110699517), ('Country_Taiwan', -930.6180066389757), ('Country_Thailand', -3485.7475740697932), ('Country_Trinadad&Tobago', 73.1755070166771), ('Country_United-States', 1490.033632680772), ('Country_Vietnam', -4262.283753444559), ('Country_Yugoslavia', 4057.1207084363064)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "La estimación del ingreso teniendo en cuenta la edad, se realiza suponiendo las otras variables constantes. <BR>\n",
        "Teniendo en cuenta el modelo estimado, se observa que con el aumento del uno por cierto en la edad, el ingreso aumenta en 362.5051150624053 unidades, manteniendo el resto de variables constantes."
      ],
      "metadata": {
        "id": "6lhRIYVRZFrY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "coef = modelo.coef_.flatten()\n",
        "coef =coef[1:77]\n",
        "summ = sum(coef)\n",
        "pred30 = -2795.831794355603+(362.5051150624053*30)+summ\n",
        "pred40 = -2795.831794355603+(362.5051150624053*40)+summ\n",
        "data_pred = pd.DataFrame({'Edad' : [30,40]})\n",
        "data_pred['Ingreso estimado'] = (pred30,pred40)\n",
        "data_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "k4-V6-j9LI1p",
        "outputId": "97115cf8-4f2b-4664-cc9f-f6e6bf9cc22b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Edad  Ingreso estimado\n",
              "0    30      77532.475851\n",
              "1    40      81157.527001"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ef5c5221-29bf-42f1-a460-a51335ac7a92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Edad</th>\n",
              "      <th>Ingreso estimado</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>77532.475851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40</td>\n",
              "      <td>81157.527001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef5c5221-29bf-42f1-a460-a51335ac7a92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ef5c5221-29bf-42f1-a460-a51335ac7a92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ef5c5221-29bf-42f1-a460-a51335ac7a92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## COMPARACIÓN 3 MODELOS:\n"
      ],
      "metadata": {
        "id": "ul3SDr0pXLTG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "modelos = pd.DataFrame({'Edad' : [30,40]})\n",
        "modelos['Modelo 1'] = (income_30,income_40)\n",
        "modelos['Modelo 2'] = (income_30_2,income_40_2)\n",
        "modelos['Modelo 3'] = (pred30,pred40)\n",
        "modelos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "oc5EXLGgX5Fb",
        "outputId": "cfb1bd9c-4236-46cc-cfc0-765f625110c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Edad      Modelo 1   Modelo 2      Modelo 3\n",
              "0    30  48803.117843  50234.043  77532.475851\n",
              "1    40  54224.794414  60171.364  81157.527001"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ebb6b602-605c-4b9e-bc1b-cb67141de887\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Edad</th>\n",
              "      <th>Modelo 1</th>\n",
              "      <th>Modelo 2</th>\n",
              "      <th>Modelo 3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>48803.117843</td>\n",
              "      <td>50234.043</td>\n",
              "      <td>77532.475851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40</td>\n",
              "      <td>54224.794414</td>\n",
              "      <td>60171.364</td>\n",
              "      <td>81157.527001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebb6b602-605c-4b9e-bc1b-cb67141de887')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ebb6b602-605c-4b9e-bc1b-cb67141de887 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ebb6b602-605c-4b9e-bc1b-cb67141de887');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se observa que si hay una diferencia en la estimación del ingreso teniendo en cuenta diferentes métodos y diferentes variables explicativas. <BR>\n",
        "Los ingresos más altos se estimaron mediante el modelo que incluyó 8 variables explicativas (tanto cualitativas como cuantitativas), mientras que los ingresos más bajos se obtuvieron con el modelo que sólo tenía en cuenta la edad de la persona."
      ],
      "metadata": {
        "id": "s9ZIe_KGYr5v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ejercicio 4.5\n",
        "\n",
        "Utilizando las características seleccionadas en el punto anterior, parta la base en training (90%) y validación (10%). Posterior, con la bases de training (90%) aplique un modelo de regresión lineal usando K fold cross validation:\n",
        "* K = 2\n",
        "* K = 5\n",
        "* K = 10\n",
        "\n",
        "Calcule el MSE de test y el MSE de validación (10% restante) y compare los modelos."
      ],
      "metadata": {
        "id": "zjgkRP11WmnC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import precision_score\n",
        "dat2 = income[['Age','Education-Num','Capital Gain','Hours per week','Education','Occupation','Sex','Country']]\n",
        "dat2 = pd.get_dummies(dat2)\n",
        "X = dat2\n",
        "y = income['Income']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1234)"
      ],
      "metadata": {
        "id": "tSpH8VhQWl_s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "k = 2"
      ],
      "metadata": {
        "id": "sP05p9j4egtr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "modelo2 =LinearRegression()\n",
        "k2 = KFold(n_splits=2, random_state=666, shuffle=True) \n",
        "est2 = cross_val_score(modelo2, X_train, y_train, scoring = 'neg_mean_squared_error', cv=k2, n_jobs=-1)\n",
        "print('El MSE para el entrenamiento con k=2 es:',np.mean(abs(est2)))\n",
        "modelo2.fit(X_train,y_train)\n",
        "y_est_2 = modelo2.predict(X_test)\n",
        "print('El MSE para la validación con k=2 es:',metrics.mean_squared_error(y_test,y_est_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hYw5ykATrpdu",
        "outputId": "a480ed9e-eda6-4ad0-933b-8d0f52980ceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El MSE para el entrenamiento con k=2 es: 335258122.49631095\n",
            "El MSE para la validación con k=2 es: 326801613.7611626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "k = 5"
      ],
      "metadata": {
        "id": "fQk3_I0WsW1G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "modelo5 =LinearRegression()\n",
        "k5 = KFold(n_splits=5, random_state=666, shuffle=True) \n",
        "est5 = cross_val_score(modelo5, X_train, y_train, scoring = 'neg_mean_squared_error', cv=k5, n_jobs=-1)\n",
        "print('El MSE para el entrenamiento con k=5 es:',np.mean(abs(est5)))\n",
        "modelo5.fit(X_train,y_train)\n",
        "y_est_5 = modelo5.predict(X_test)\n",
        "print('El MSE para la validación con k=5 es:',metrics.mean_squared_error(y_test,y_est_5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "guPwbbWasZ7W",
        "outputId": "c862c028-a64a-4284-8ac1-2ad1e9e472e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El MSE para el entrenamiento con k=5 es: 333990632.66691625\n",
            "El MSE para la validación con k=5 es: 326801613.7611626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "k = 10"
      ],
      "metadata": {
        "id": "6AowSKTZslHO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "modelo10 =LinearRegression()\n",
        "k10 = KFold(n_splits=10, random_state=666, shuffle=True) \n",
        "est10 = cross_val_score(modelo10, X_train, y_train, scoring = 'neg_mean_squared_error', cv=k10, n_jobs=-1)\n",
        "print('El MSE para el entrenamiento con k=10 es:',np.mean(abs(est10)))\n",
        "modelo10.fit(X_train,y_train)\n",
        "y_est_10 = modelo10.predict(X_test)\n",
        "print('El MSE para la validación con k=10 es:',metrics.mean_squared_error(y_test,y_est_10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CDbLYv5ssmCJ",
        "outputId": "149a6885-080d-419f-b7f0-20dc7fcb765a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El MSE para el entrenamiento con k=10 es: 333981801.28750193\n",
            "El MSE para la validación con k=10 es: 326801613.7611626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mse = pd.DataFrame({'k' : ['2','5','10']})\n",
        "mse['MSE train'] = (np.mean(abs(est2)),np.mean(abs(est5)),np.mean(abs(est10)))\n",
        "mse['MSE test'] = (metrics.mean_squared_error(y_test,y_est_),metrics.mean_squared_error(y_test,y_est_10),metrics.mean_squared_error(y_test,y_est_10))"
      ],
      "metadata": {
        "id": "MuOudm8n6VM3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ZotgUpZrQm_"
      },
      "source": [
        "#Parte 2: Regresión Logística\n",
        "\n",
        "### Customer Churn: \n",
        "La pérdida/abandono de los clientes de la empresa. Especialmente, las industrias que la adquisición de usuarios es costosa, es de crucial importancia para una empresa para reducir e idealmente hacer que la rotación de clientes a 0 para mantener sus ingresos recurrentes. Si se considera que la retención de clientes es siempre más barata que la adquisición de clientes y generalmente depende de los datos del usuario (uso del servicio o producto), plantea un gran/excitante/difícil problema para el aprendizaje automático.\n",
        "\n",
        "### Datos\n",
        "El conjunto de datos procede de un proveedor de servicios de telecomunicaciones en el que se recoge el uso del servicio (plan internacional, plan de buzón de voz, uso diurno, uso nocturno, etc.) y la información demográfica básica (estado y código de área) del usuario. En el caso de las etiquetas, tengo un único punto de datos que indica si el cliente ha sido dado de baja o no.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TgPh9vh-rQnA"
      },
      "source": [
        "# Download the dataset\n",
        "data = pd.read_csv('https://github.com/ghuiber/churn/raw/master/data/churn.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_upTQFR_rQnA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "outputId": "32dc3bd7-bd4c-40a3-de17-1d0e7a0481e1"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  State  Account Length  Area Code     Phone Int'l Plan VMail Plan  \\\n",
              "0    KS             128        415  382-4657         no        yes   \n",
              "1    OH             107        415  371-7191         no        yes   \n",
              "2    NJ             137        415  358-1921         no         no   \n",
              "3    OH              84        408  375-9999        yes         no   \n",
              "4    OK              75        415  330-6626        yes         no   \n",
              "\n",
              "   VMail Message  Day Mins  Day Calls  Day Charge  ...  Eve Calls  Eve Charge  \\\n",
              "0             25     265.1        110       45.07  ...         99       16.78   \n",
              "1             26     161.6        123       27.47  ...        103       16.62   \n",
              "2              0     243.4        114       41.38  ...        110       10.30   \n",
              "3              0     299.4         71       50.90  ...         88        5.26   \n",
              "4              0     166.7        113       28.34  ...        122       12.61   \n",
              "\n",
              "   Night Mins  Night Calls  Night Charge  Intl Mins  Intl Calls  Intl Charge  \\\n",
              "0       244.7           91         11.01       10.0           3         2.70   \n",
              "1       254.4          103         11.45       13.7           3         3.70   \n",
              "2       162.6          104          7.32       12.2           5         3.29   \n",
              "3       196.9           89          8.86        6.6           7         1.78   \n",
              "4       186.9          121          8.41       10.1           3         2.73   \n",
              "\n",
              "   CustServ Calls  Churn?  \n",
              "0               1  False.  \n",
              "1               1  False.  \n",
              "2               0  False.  \n",
              "3               2  False.  \n",
              "4               3  False.  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d58ca73d-d8dd-46ec-97de-fbde48c08d69\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>Phone</th>\n",
              "      <th>Int'l Plan</th>\n",
              "      <th>VMail Plan</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>...</th>\n",
              "      <th>Eve Calls</th>\n",
              "      <th>Eve Charge</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>Churn?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KS</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>382-4657</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>...</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>OH</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>371-7191</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>...</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NJ</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>358-1921</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>...</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>375-9999</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>...</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>OK</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>330-6626</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>...</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d58ca73d-d8dd-46ec-97de-fbde48c08d69')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d58ca73d-d8dd-46ec-97de-fbde48c08d69 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d58ca73d-d8dd-46ec-97de-fbde48c08d69');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ka0sMeFdrQnB"
      },
      "source": [
        "# Ejercicio 4.6\n",
        "\n",
        "¿Cuál es la distribución de los churners? Haga la transformación correspondiente para predecir Churn. (0-FAlse, 1-True)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Churn?'].value_counts()"
      ],
      "metadata": {
        "id": "IMP8Y_r_Wdox",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f188b1a8-839e-4c33-f161-f74d6b2dd7dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False.    2850\n",
              "True.      483\n",
              "Name: Churn?, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['churners'] = data['Churn?'].map({'False.':0, 'True.':1}).astype(np.int)\n",
        "data.head()"
      ],
      "metadata": {
        "id": "fVCHtFRVhzzU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "outputId": "15f3d82f-faa1-44be-8198-0eb7424ab413"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  State  Account Length  Area Code     Phone Int'l Plan VMail Plan  \\\n",
              "0    KS             128        415  382-4657         no        yes   \n",
              "1    OH             107        415  371-7191         no        yes   \n",
              "2    NJ             137        415  358-1921         no         no   \n",
              "3    OH              84        408  375-9999        yes         no   \n",
              "4    OK              75        415  330-6626        yes         no   \n",
              "\n",
              "   VMail Message  Day Mins  Day Calls  Day Charge  ...  Eve Charge  \\\n",
              "0             25     265.1        110       45.07  ...       16.78   \n",
              "1             26     161.6        123       27.47  ...       16.62   \n",
              "2              0     243.4        114       41.38  ...       10.30   \n",
              "3              0     299.4         71       50.90  ...        5.26   \n",
              "4              0     166.7        113       28.34  ...       12.61   \n",
              "\n",
              "   Night Mins  Night Calls  Night Charge  Intl Mins  Intl Calls  Intl Charge  \\\n",
              "0       244.7           91         11.01       10.0           3         2.70   \n",
              "1       254.4          103         11.45       13.7           3         3.70   \n",
              "2       162.6          104          7.32       12.2           5         3.29   \n",
              "3       196.9           89          8.86        6.6           7         1.78   \n",
              "4       186.9          121          8.41       10.1           3         2.73   \n",
              "\n",
              "   CustServ Calls  Churn?  churners  \n",
              "0               1  False.         0  \n",
              "1               1  False.         0  \n",
              "2               0  False.         0  \n",
              "3               2  False.         0  \n",
              "4               3  False.         0  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7f08aef-5651-49d2-91c2-16dedc155e4f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>Phone</th>\n",
              "      <th>Int'l Plan</th>\n",
              "      <th>VMail Plan</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>...</th>\n",
              "      <th>Eve Charge</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>Churn?</th>\n",
              "      <th>churners</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KS</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>382-4657</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>...</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>OH</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>371-7191</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>...</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NJ</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>358-1921</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>...</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>375-9999</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>...</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>OK</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>330-6626</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>...</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7f08aef-5651-49d2-91c2-16dedc155e4f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d7f08aef-5651-49d2-91c2-16dedc155e4f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d7f08aef-5651-49d2-91c2-16dedc155e4f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['churners'].value_counts()"
      ],
      "metadata": {
        "id": "a_1Bcht4h2nm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d49e07d6-8e4d-4e05-e024-48f8f0b08acf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2850\n",
              "1     483\n",
              "Name: churners, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['churners'].plot.hist()"
      ],
      "metadata": {
        "id": "Mf189O3jh3QL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "7799a332-34d5-4306-cc8a-7766fc02a6c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcf46a7b410>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Anteriormente se encuentra como se distribuye la variable de interés.\n"
      ],
      "metadata": {
        "id": "yWQqOF918JRS"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gnKKbfKZrQnD"
      },
      "source": [
        "# Ejercicio 4.7\n",
        "Entrene una Regresión Logística creando Y y X con la información en IntlCharge.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "data.sort_values('Intl Charge', inplace=True)\n",
        "logreg = LogisticRegression(solver='liblinear',C=1e9)\n",
        "feature_cols = ['Intl Charge']\n",
        "X = data[feature_cols]\n",
        "y = data.churners\n",
        "logreg.fit(X, y)\n",
        "data['churners_pred'] = logreg.predict(X)\n",
        "data.head()"
      ],
      "metadata": {
        "id": "lPbebKN6WfIh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "outputId": "0a923e0c-e56b-46a2-8fcb-a7b06c6ccc77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     State  Account Length  Area Code     Phone Int'l Plan VMail Plan  \\\n",
              "1400    VA             115        415  367-3971         no         no   \n",
              "1080    OH             114        415  363-2602         no         no   \n",
              "3290    CA             127        510  388-4331         no         no   \n",
              "2513    NY              86        510  387-2041         no         no   \n",
              "488     VT             165        510  345-1998         no         no   \n",
              "\n",
              "      VMail Message  Day Mins  Day Calls  Day Charge  ...  Night Mins  \\\n",
              "1400              0     132.0         90       22.44  ...       175.8   \n",
              "1080              0     191.5         88       32.56  ...       220.3   \n",
              "3290              0     107.9        128       18.34  ...       218.5   \n",
              "2513              0      70.7        125       12.02  ...       174.6   \n",
              "488               0     242.9        126       41.29  ...       228.4   \n",
              "\n",
              "      Night Calls  Night Charge  Intl Mins  Intl Calls  Intl Charge  \\\n",
              "1400          114          7.91        0.0           0          0.0   \n",
              "1080          118          9.91        0.0           0          0.0   \n",
              "3290           95          9.83        0.0           0          0.0   \n",
              "2513          107          7.86        0.0           0          0.0   \n",
              "488           126         10.28        0.0           0          0.0   \n",
              "\n",
              "      CustServ Calls  Churn?  churners  churners_pred  \n",
              "1400               3  False.         0              0  \n",
              "1080               0  False.         0              0  \n",
              "3290               0  False.         0              0  \n",
              "2513               2  False.         0              0  \n",
              "488                1  False.         0              0  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59e4c600-fc48-422b-94c4-cd289ef04f13\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>Phone</th>\n",
              "      <th>Int'l Plan</th>\n",
              "      <th>VMail Plan</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>...</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>Churn?</th>\n",
              "      <th>churners</th>\n",
              "      <th>churners_pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1400</th>\n",
              "      <td>VA</td>\n",
              "      <td>115</td>\n",
              "      <td>415</td>\n",
              "      <td>367-3971</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>90</td>\n",
              "      <td>22.44</td>\n",
              "      <td>...</td>\n",
              "      <td>175.8</td>\n",
              "      <td>114</td>\n",
              "      <td>7.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1080</th>\n",
              "      <td>OH</td>\n",
              "      <td>114</td>\n",
              "      <td>415</td>\n",
              "      <td>363-2602</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>191.5</td>\n",
              "      <td>88</td>\n",
              "      <td>32.56</td>\n",
              "      <td>...</td>\n",
              "      <td>220.3</td>\n",
              "      <td>118</td>\n",
              "      <td>9.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3290</th>\n",
              "      <td>CA</td>\n",
              "      <td>127</td>\n",
              "      <td>510</td>\n",
              "      <td>388-4331</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>107.9</td>\n",
              "      <td>128</td>\n",
              "      <td>18.34</td>\n",
              "      <td>...</td>\n",
              "      <td>218.5</td>\n",
              "      <td>95</td>\n",
              "      <td>9.83</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2513</th>\n",
              "      <td>NY</td>\n",
              "      <td>86</td>\n",
              "      <td>510</td>\n",
              "      <td>387-2041</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>70.7</td>\n",
              "      <td>125</td>\n",
              "      <td>12.02</td>\n",
              "      <td>...</td>\n",
              "      <td>174.6</td>\n",
              "      <td>107</td>\n",
              "      <td>7.86</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>VT</td>\n",
              "      <td>165</td>\n",
              "      <td>510</td>\n",
              "      <td>345-1998</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>242.9</td>\n",
              "      <td>126</td>\n",
              "      <td>41.29</td>\n",
              "      <td>...</td>\n",
              "      <td>228.4</td>\n",
              "      <td>126</td>\n",
              "      <td>10.28</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59e4c600-fc48-422b-94c4-cd289ef04f13')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-59e4c600-fc48-422b-94c4-cd289ef04f13 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-59e4c600-fc48-422b-94c4-cd289ef04f13');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['churners_pred'].value_counts()"
      ],
      "metadata": {
        "id": "EiKrx3gGiCp0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c395e00-57c3-4565-b3df-d94441f93e9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    3333\n",
              "Name: churners_pred, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['churners_pred']"
      ],
      "metadata": {
        "id": "Ax3t7jo3iDVk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa06aab3-f220-4bc8-eb4e-a6af4fff5dcf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1400    0\n",
              "1080    0\n",
              "3290    0\n",
              "2513    0\n",
              "488     0\n",
              "       ..\n",
              "535     0\n",
              "2816    0\n",
              "1816    0\n",
              "314     0\n",
              "115     0\n",
              "Name: churners_pred, Length: 3333, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(data['Intl Charge'],data['churners'])\n",
        "plt.plot(data['Intl Charge'],data['churners_pred'], color='red')\n",
        "plt.xlabel('Intl Charge')\n",
        "plt.ylabel('Churners')"
      ],
      "metadata": {
        "id": "PnCjvVAbiHOS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "outputId": "66f19b84-f7ee-4d58-e39f-106942485df7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Churners')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEGCAYAAABo25JHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWCElEQVR4nO3df7DldX3f8edrL3frBdGFsFrdXVwkKymKgtwCkTZVExXRCtGoEGlrYqSdRqtjQgeniUYbi5UZpmYkE0nqOFoj9SduCnV1FJtoRbkrCGERsyLKLlZWERRZBXbf/eOcxbN3749z4X7v2Xs/z8fMGc738/31/rL3fF7n++N8v6kqJEntWjXqAiRJo2UQSFLjDAJJapxBIEmNMwgkqXGHjLqAhTrqqKNq48aNoy5DkpaVrVu3/qCq1s40btkFwcaNG5mamhp1GZK0rCT5zmzjPDQkSY0zCCSpcQaBJDXOIJCkxhkEktS4zq4aSvI+4MXAnVX1tBnGB3g3cCZwH/DqqvpaV/WMyhXX7eTiLbdwx927eeKaCS54wXGcfdK6JVvfxl+a4P9+6y723VowQAET46v4+YN72Vu9tkNXj3Hf/XsemueaW3/EnirGEs49dQPf3nUvX/rWXZ3VrfacfuyRvHzyaC7ecgs779499HxjCac9+Qhu++Hu/T5XwH5/+8/5lbVc/Y1d3HH3bh418Pe+z7r+fFPfuYsPf+V29lQRYHws3L+nN+ERh47z1n/51AOWve9zvFSf767Xk67uPprk14B7gQ/MEgRnAq+nFwSnAu+uqlPnW+7k5GQtl8tHr7huJ2/+xI3sfmDPQ20T42Nc9NITOvtjmb4+6WC2KuzXOT9c46sCgQf2LGxhq4C9800TGFuV/ZY9MT7Gy05ex8e37uz8871Y/UiSrVU1OdO4zg4NVdXfAnN9hTyLXkhUVV0DrEnyhK7qGYWLt9xyQKe8+4E9XLzlliVbn3QwW4wQAHhgby04BGD+EIBejdOXvfuBPXz4K7cvyed7KfqRUZ4jWAfcPjC8o992gCTnJ5lKMrVr164lKW4x3DHL7u5s7V2tT9Li2zPL0ZTF/hwuRT+yLE4WV9VlVTVZVZNr1874C+mD0hPXTCyovav1SVp8Y8mM7Yv9OVyKfmSUQbAT2DAwvL7ftmJc8ILjmBgf269tYnzsoRNbS7E+6WC2aua+dMHGV4XxsYUvbJgOcFU4YNkT42Oce+qGJfl8L0U/Msog2Az86/ScBtxTVd8bYT2L7uyT1nHRS09g3ZoJQu8qha5OFM+2vtOPPZLBP+F97yfGVz30IQxw2Oqx/ebZ921nLOG8047m9GOP7KRmtev0Y4/kklecyLoFfrMdSzj92CP3+zu/+OXP4OLfesZ+beeddvRDw4N/7/usWzPBJa88kfNOO/qhv/cAqwc6/SMOHeeSV5x4wLIveukJ/OnZJyzJ53sp+pEurxr6MPBs4Cjg+8BbgXGAqvqL/uWj7wHOoHf56O9U1byXAy2nq4Yk6WAx11VDnf2OoKrOnWd8Ab/f1folScNZFieLJUndMQgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4zoNgiRnJLklyfYkF84w/ugkVye5LskNSc7ssh5J0oE6C4IkY8ClwAuB44Fzkxw/bbI/Aj5SVScB5wB/3lU9kqSZdblHcAqwvapurar7gcuBs6ZNU8Bj+u8fC9zRYT2SpBl0GQTrgNsHhnf02wb9CXBekh3AVcDrZ1pQkvOTTCWZ2rVrVxe1SlKzRn2y+Fzg/VW1HjgT+GCSA2qqqsuqarKqJteuXbvkRUrSStZlEOwENgwMr++3DXoN8BGAqvoy8CjgqA5rkiRN02UQXAtsSnJMktX0TgZvnjbNd4FfB0jyT+gFgcd+JGkJdRYEVfUg8DpgC3AzvauDbkry9iQv6U/2B8Brk3wd+DDw6qqqrmqSJB3okC4XXlVX0TsJPNj2loH324DTu6xBkjS3UZ8sliSNmEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktS4ToMgyRlJbkmyPcmFs0zziiTbktyU5K+7rEeSdKBDulpwkjHgUuB5wA7g2iSbq2rbwDSbgDcDp1fVj5I8rqt6JEkz63KP4BRge1XdWlX3A5cDZ02b5rXApVX1I4CqurPDeiRJM+gyCNYBtw8M7+i3DXoK8JQkX0pyTZIzZlpQkvOTTCWZ2rVrV0flSlKbhgqCJO9K8pgk40k+l2RXkvMWYf2HAJuAZwPnAn+ZZM30iarqsqqarKrJtWvXLsJqJUn7DLtH8Pyq+jHwYuA24JeBC+aZZyewYWB4fb9t0A5gc1U9UFXfBr5JLxgkSUtk2CAY7//3RcBHq+qeIea5FtiU5Jgkq4FzgM3TprmC3t4ASY6id6jo1iFrkiQtgmGDYHOSbwAnA59Lshb42VwzVNWDwOuALcDNwEeq6qYkb0/ykv5kW4AfJtkGXA1cUFU/fDgbIkl6eFJVc0+QrAJOA74B3FNVe5IcBhxeVf9vCWrcz+TkZE1NTS31aiVpWUuytaomZxo37x5BVe2ld4nnXVW1p9/201GEgCRp8Q17aOhzSV6WJJ1WI0lacsMGwb8FPgrcn+THSX6S5Mcd1iVJWiJD3WKiqg7vuhBJ0mgM+4OyJDkvyR/3hzckOaXb0iRJS2HYQ0N/Dvwq8Nv94Xvp3VBOkrTMDXv30VOr6plJrgPo3yl0dYd1SZKWyLB7BA/0bytdAP0flO3trCpJ0pIZNgj+DPgk8Lgk7wC+CPyXzqqSJC2ZYa8a+lCSrcCvAwHOrqqbO61MkrQkFvKEsn8AfrxvniRHV9V3O6lKkrRkhgqCJK8H3gp8H9hDb6+ggKd3V5okaSkMu0fwBuA47wwqSSvPsCeLbweGeQaBJGmZGXaP4FbgC0muBH6+r7GqLumkKknSkhk2CL7bf63uvyRJK8S8QdD/IdlTqupVS1CPJGmJDfNgmj3Ak7ylhCStTAs5R/ClJJuBn+5r9ByBJC1/wwbBt/qvVYDPJpCkFWTYW0y8retCJEmjMewvi6+mf+fRQVX13EWvSJK0pIY9NPSHA+8fBbwMeHDxy5EkLbVhDw1tndb0pSRf7aAeSdISG/bQ0JEDg6uAk4HHdlKRJGlJDXtoaCu9cwShd0jo28BruipKkrR0hj00dEzXhUiSRmPoB9MkeRawcXCeqvpABzVJkpbQsOcIPggcC1xP78E00DtUZBBI0jI37B7BJHB8VR3wWwJJ0vI27INp/h74x10WIkkajTmDIMnf9G80dxSwLcmWJJv3veZbeJIzktySZHuSC+eY7mVJKsnkwjdBkvRIzHdoaDPweODvprX/c+B7c83Yf47BpcDzgB3AtUk2V9W2adMdTu+ZyF9ZQN2SpEUy36Ghs4BPVdX/GXwBnwLOnmfeU4DtVXVrVd0PXN5f3nT/GfivwM8WWLskaRHMFwSPr6obpzf22zbOM+86eg+932dHv+0hSZ4JbKiqK+daUJLzk0wlmdq1a9c8q5UkLcR8QbBmjnETj2TFSVYBlwB/MN+0VXVZVU1W1eTatWsfyWolSdPMFwRTSV47vTHJ79G77cRcdgIbBobX99v2ORx4GvCFJLcBpwGbPWEsSUtrvpPFbwQ+meRV/KLjnwRWA785z7zXApuSHEMvAM4BfnvfyKq6h97VSAAk+QLwh1U1tZANkCQ9MnMGQVV9H3hWkufQ+/YOcGVVfX6+BVfVg0leB2wBxoD3VdVNSd4OTFXVvJefSpK6l+X2Y+HJycmamnKnQZIWIsnWqprx0PuwvyyWJK1QBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuM6DYIkZyS5Jcn2JBfOMP5NSbYluSHJ55I8qct6JEkH6iwIkowBlwIvBI4Hzk1y/LTJrgMmq+rpwMeAd3VVjyRpZl3uEZwCbK+qW6vqfuBy4KzBCarq6qq6rz94DbC+w3okSTPoMgjWAbcPDO/ot83mNcD/nmlEkvOTTCWZ2rVr1yKWKEk6KE4WJzkPmAQunml8VV1WVZNVNbl27dqlLU6SVrhDOlz2TmDDwPD6ftt+kvwG8J+Af1FVP++wHknSDLrcI7gW2JTkmCSrgXOAzYMTJDkJeC/wkqq6s8NaJEmz6CwIqupB4HXAFuBm4CNVdVOStyd5SX+yi4FHAx9Ncn2SzbMsTpLUkS4PDVFVVwFXTWt7y8D73+hy/ZKk+R0UJ4slSaNjEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGHdLlwpOcAbwbGAP+qqreOW38PwI+AJwM/BB4ZVXdtth1bLzwygPabnvnixa0jCuu28nFW27hjrt389iJcRK4+74HeOKaCS54wXGcfdK6Wed78yduYPcDe/drX9Nfxo/ue4AANTBufBXsKdhbMJZw2pOP4LYf7mbn3bsXVLOk4axK7/M2Mb5qv8/qWHqfzb01+7wBDl09xn3375mxPxjsO+brL0YlVXNs4SNZcDIGfBN4HrADuBY4t6q2DUzz74GnV9W/S3IO8JtV9cq5ljs5OVlTU1ND1zFTCOwzbBj0OvMb2f3AnhnHT4yPcdFLTzjgH/eK63bypv95PXtnnEvSSjTYH8zUd8zWX3QtydaqmpxpXJd7BKcA26vq1n4RlwNnAdsGpjkL+JP++48B70mS6iCdXn7DZ3jtV6/Yv/FvHj3UvM/4wU/51J65Sxq/LHDUYQfM9+l55pO08uzrD2brO2bqL4bylrfAK+f8rvywdBkE64DbB4Z3AKfONk1VPZjkHuCXgB8MTpTkfOB8gKOPPvphFXP3xGP4h6M27Nf2lOOfMNS8N9/4PebrzgMcM215w8wnaeXZ1x/M1gfM1F8M5YgjHmFlM+v0HMFiqarLgMugd2jo4Szjs5tO47ObTtuv7UVDHhp6xzs/P+/x+XVrJjjzwucueD5JK8++/mC2PmCm/mKUurxqaCcw+BV8fb9txmmSHAI8lt5J44PKBS84jonxsVnHT4yPccELjptxPi/Lktoy2B/M1HfM1l+MUpf91LXApiTHJFkNnANsnjbNZuDf9N//FvD5xT4/MNsJ4YVcNXT2Seu46KUnsG7NBKF3xc8Rh44Tesk+24mfs09axyWvPJGJ8QP/N+9bBvR2EweNr+pdxQC9q4ZOP/ZI1q2ZGLpeSQuz7/M2/bM6ll+Mm02Aw1aPzdgfTO875uovRqmzq4YAkpwJ/Dd6l4++r6rekeTtwFRVbU7yKOCDwEnAXcA5+04uz2ahVw1JkkZ31RBVdRVw1bS2twy8/xnw8i5rkCTNzUPYktQ4g0CSGmcQSFLjDAJJalynVw11Icku4DsPc/ajmPar5RVopW+j27f8rfRtPFi370lVtXamEcsuCB6JJFOzXT61Uqz0bXT7lr+Vvo3Lcfs8NCRJjTMIJKlxrQXBZaMuYAms9G10+5a/lb6Ny277mjpHIEk6UGt7BJKkaQwCSWpcM0GQ5IwktyTZnuTCUdez2JK8L8mdSf5+1LV0IcmGJFcn2ZbkpiRvGHVNiynJo5J8NcnX+9v3tlHX1IUkY0muS/K/Rl1LF5LcluTGJNcnWTa3SW7iHEGSMeCbwPPoPTLzWuDcqto254zLSJJfA+4FPlBVTxt1PYstyROAJ1TV15IcDmwFzl4p/4ZJAhxWVfcmGQe+CLyhqq4ZcWmLKsmbgEngMVX14lHXs9iS3AZMVtXB+IOyWbWyR3AKsL2qbq2q+4HLgbNGXNOiqqq/pfdMhxWpqr5XVV/rv/8JcDO9Z16vCNVzb39wvP9aUd/SkqwHXgT81ahr0f5aCYJ1wO0DwztYQZ1Ia5JspPcwo6+MtpLF1T9scj1wJ/DZqlpR20fvIVX/Edg76kI6VMBnkmxNcv6oixlWK0GgFSLJo4GPA2+sqh+Pup7FVFV7qupEes/3PiXJijnEl+TFwJ1VtXXUtXTsn1XVM4EXAr/fP2R70GslCHYCGwaG1/fbtIz0j51/HPhQVX1i1PV0paruBq4Gzhh1LYvodOAl/WPolwPPTfI/RlvS4quqnf3/3gl8kt5h6YNeK0FwLbApyTFJVgPnAJtHXJMWoH8y9b8DN1fVJaOuZ7ElWZtkTf/9BL0LG74x2qoWT1W9uarWV9VGep+/z1fVeSMua1ElOax/IQNJDgOeDyyLq/iaCIKqehB4HbCF3knGj1TVTaOtanEl+TDwZeC4JDuSvGbUNS2y04F/Re+b5PX915mjLmoRPQG4OskN9L64fLaqVuQllivY44EvJvk68FXgyqr69IhrGkoTl49KkmbXxB6BJGl2BoEkNc4gkKTGGQSS1DiDQJIaZxBoxUty7xDTvDHJoQPDtyU5aobpHp3kvUm+1b+NwBeSnJpk40q986tWPoNA6nkjcOi8U/VumHYXsKmqTgZ+BzggMBYqySGPdBnSw2UQqBlJnt3/Bv+xJN9I8qH0/AfgifR+0HX1HPMfC5wK/FFV7QWoqm9X1ZX9ScaS/GX/eQKf6f9CmCSvTXJt/1kDH9+355Hk/Un+IslXgHclOTbJNf372f/p4J5Mkgv6y7hhpT6rQKNjEKg1J9H79n888GTg9Kr6M+AO4DlV9Zw55n0qcH1V7Zll/Cbg0qp6KnA38LJ++yeq6p9W1TPo/bJ98Fff64FnVdWbgHcD766qE+jdIReAJM/vL/sU4ETg5OVyMzMtDwaBWvPVqtrR/0Z/PbBxEZf97aq6vv9+68Cyn5bk75LcCLyKXqDs89GBYPlV4KP99389MM3z+6/rgK8Bv0IvGKRF4XFJtebnA+/3sLDPwE3AM5KMzbJXMH3ZE/3376f3NLWvJ3k18OyB6X46xHoDXFRV711ArdLQ3COQen4CHD7XBFX1LWAKeFv/bqj0rxZ60TzLPhz4Xv822q+aY7pr+MXhpHMG2rcAv9t/FgNJ1iV53DzrlIZmEEg9lwGfnutkcd/v0bvL5Pb+5aLvp/dEsbn8Mb2nqX2JuW8t/UbgTf07kP4ycA9AVX2G3qGiL/cPL32MeUJLWgjvPiodJPpXE+2uqkpyDnBuVa2oZ2vr4OQ5AungcTLwnv5hp7uB3x1xPWqEewSS1DjPEUhS4wwCSWqcQSBJjTMIJKlxBoEkNe7/A2sEhwAcfroGAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ErUjHQE5rQnE"
      },
      "source": [
        "# Ejercicio 4.8\n",
        "\n",
        "¿Cuáles son los coeficientes de la regresión logística? Interpretelos para un valor de IntlCharge = 1.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logreg.intercept_"
      ],
      "metadata": {
        "id": "grKzgyWwWgo4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "288dda76-0d37-40b6-d08a-b36c58c04bd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.51428271])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logreg.coef_[0] * 1"
      ],
      "metadata": {
        "id": "vm4Zwv1uiM-H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9aadd90-4ac4-44c2-e299-e99a9417826f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.2624392])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Un aumento de 1 unidad en \"IntlCharge = 1\" se asocia con un aumento de 0.262 unidades en las probabilidades logarítmicas del \"Churners\"."
      ],
      "metadata": {
        "id": "Rp3MT-d_iUFB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "coe = logreg.intercept_ + logreg.coef_[0] * 1\n",
        "coe "
      ],
      "metadata": {
        "id": "ZDZ73DKpiU8a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3fc7f8f2-737a-4a90-9abd-cf9064cf90f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.25184351])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lfvf_pqSkbzI"
      },
      "source": [
        "# Ejercicio 4.9\n",
        "\n",
        "Seleccione 3 variables independientes para entrenar una regresión logística. Interprete cada uno de los valores de los coeficientes en función de la variable churn.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Proceso para escoger las 3 variables"
      ],
      "metadata": {
        "id": "ilUue4KwibDz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "id": "-knBiiYbcXwn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 378
        },
        "outputId": "30367f72-f667-48cc-d1bb-39c57ee5b8d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Account Length    Area Code  VMail Message     Day Mins    Day Calls  \\\n",
              "count     3333.000000  3333.000000    3333.000000  3333.000000  3333.000000   \n",
              "mean       101.064806   437.182418       8.099010   179.775098   100.435644   \n",
              "std         39.822106    42.371290      13.688365    54.467389    20.069084   \n",
              "min          1.000000   408.000000       0.000000     0.000000     0.000000   \n",
              "25%         74.000000   408.000000       0.000000   143.700000    87.000000   \n",
              "50%        101.000000   415.000000       0.000000   179.400000   101.000000   \n",
              "75%        127.000000   510.000000      20.000000   216.400000   114.000000   \n",
              "max        243.000000   510.000000      51.000000   350.800000   165.000000   \n",
              "\n",
              "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
              "count  3333.000000  3333.000000  3333.000000  3333.000000  3333.000000   \n",
              "mean     30.562307   200.980348   100.114311    17.083540   200.872037   \n",
              "std       9.259435    50.713844    19.922625     4.310668    50.573847   \n",
              "min       0.000000     0.000000     0.000000     0.000000    23.200000   \n",
              "25%      24.430000   166.600000    87.000000    14.160000   167.000000   \n",
              "50%      30.500000   201.400000   100.000000    17.120000   201.200000   \n",
              "75%      36.790000   235.300000   114.000000    20.000000   235.300000   \n",
              "max      59.640000   363.700000   170.000000    30.910000   395.000000   \n",
              "\n",
              "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
              "count  3333.000000   3333.000000  3333.000000  3333.000000  3333.000000   \n",
              "mean    100.107711      9.039325    10.237294     4.479448     2.764581   \n",
              "std      19.568609      2.275873     2.791840     2.461214     0.753773   \n",
              "min      33.000000      1.040000     0.000000     0.000000     0.000000   \n",
              "25%      87.000000      7.520000     8.500000     3.000000     2.300000   \n",
              "50%     100.000000      9.050000    10.300000     4.000000     2.780000   \n",
              "75%     113.000000     10.590000    12.100000     6.000000     3.270000   \n",
              "max     175.000000     17.770000    20.000000    20.000000     5.400000   \n",
              "\n",
              "       CustServ Calls     churners  churners_pred  \n",
              "count     3333.000000  3333.000000         3333.0  \n",
              "mean         1.562856     0.144914            0.0  \n",
              "std          1.315491     0.352067            0.0  \n",
              "min          0.000000     0.000000            0.0  \n",
              "25%          1.000000     0.000000            0.0  \n",
              "50%          1.000000     0.000000            0.0  \n",
              "75%          2.000000     0.000000            0.0  \n",
              "max          9.000000     1.000000            0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3dc7c56a-5045-4709-9424-0fadc8ff5943\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>Eve Mins</th>\n",
              "      <th>Eve Calls</th>\n",
              "      <th>Eve Charge</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>churners</th>\n",
              "      <th>churners_pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>101.064806</td>\n",
              "      <td>437.182418</td>\n",
              "      <td>8.099010</td>\n",
              "      <td>179.775098</td>\n",
              "      <td>100.435644</td>\n",
              "      <td>30.562307</td>\n",
              "      <td>200.980348</td>\n",
              "      <td>100.114311</td>\n",
              "      <td>17.083540</td>\n",
              "      <td>200.872037</td>\n",
              "      <td>100.107711</td>\n",
              "      <td>9.039325</td>\n",
              "      <td>10.237294</td>\n",
              "      <td>4.479448</td>\n",
              "      <td>2.764581</td>\n",
              "      <td>1.562856</td>\n",
              "      <td>0.144914</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>39.822106</td>\n",
              "      <td>42.371290</td>\n",
              "      <td>13.688365</td>\n",
              "      <td>54.467389</td>\n",
              "      <td>20.069084</td>\n",
              "      <td>9.259435</td>\n",
              "      <td>50.713844</td>\n",
              "      <td>19.922625</td>\n",
              "      <td>4.310668</td>\n",
              "      <td>50.573847</td>\n",
              "      <td>19.568609</td>\n",
              "      <td>2.275873</td>\n",
              "      <td>2.791840</td>\n",
              "      <td>2.461214</td>\n",
              "      <td>0.753773</td>\n",
              "      <td>1.315491</td>\n",
              "      <td>0.352067</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>23.200000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>1.040000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>74.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>143.700000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>24.430000</td>\n",
              "      <td>166.600000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>14.160000</td>\n",
              "      <td>167.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>7.520000</td>\n",
              "      <td>8.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.300000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>101.000000</td>\n",
              "      <td>415.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>179.400000</td>\n",
              "      <td>101.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>201.400000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>17.120000</td>\n",
              "      <td>201.200000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>9.050000</td>\n",
              "      <td>10.300000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.780000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>127.000000</td>\n",
              "      <td>510.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>216.400000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>36.790000</td>\n",
              "      <td>235.300000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>235.300000</td>\n",
              "      <td>113.000000</td>\n",
              "      <td>10.590000</td>\n",
              "      <td>12.100000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>3.270000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>243.000000</td>\n",
              "      <td>510.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>350.800000</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>59.640000</td>\n",
              "      <td>363.700000</td>\n",
              "      <td>170.000000</td>\n",
              "      <td>30.910000</td>\n",
              "      <td>395.000000</td>\n",
              "      <td>175.000000</td>\n",
              "      <td>17.770000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>5.400000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3dc7c56a-5045-4709-9424-0fadc8ff5943')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3dc7c56a-5045-4709-9424-0fadc8ff5943 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3dc7c56a-5045-4709-9424-0fadc8ff5943');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "id": "vHq5bx9Qin4m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2c0fc605-826e-4836-894e-b1ea4ef83473"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['State', 'Account Length', 'Area Code', 'Phone', 'Int'l Plan',\n",
              "       'VMail Plan', 'VMail Message', 'Day Mins', 'Day Calls', 'Day Charge',\n",
              "       'Eve Mins', 'Eve Calls', 'Eve Charge', 'Night Mins', 'Night Calls',\n",
              "       'Night Charge', 'Intl Mins', 'Intl Calls', 'Intl Charge',\n",
              "       'CustServ Calls', 'Churn?', 'churners', 'churners_pred'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn \n",
        "seaborn.boxplot(x=\"churners\",y=\"Intl Charge\",data=data)"
      ],
      "metadata": {
        "id": "3Aemf-7ZiqYP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "5673a466-05be-4b83-c191-6f6f4ba1c832"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcf45be0710>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se presentan los boxplot para la variable de interés y las variables cualitativas que hay en la base de datos, para observar los movimientos de dichas variables y visualmente que variables tienen diferencias significativas."
      ],
      "metadata": {
        "id": "CL6XQK5XiuAX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(7, 2, figsize=(12, 25))\n",
        "seaborn.boxplot(ax=axes[0, 0], data=data, x='churners',y='Account Length')\n",
        "seaborn.boxplot(ax=axes[0, 1], data=data, x='churners',y='VMail Message')\n",
        "seaborn.boxplot(ax=axes[1, 0], data=data, x='churners',y='Day Mins')\n",
        "seaborn.boxplot(ax=axes[1, 1], data=data, x='churners',y='Day Calls')\n",
        "seaborn.boxplot(ax=axes[2, 0], data=data, x='churners',y='Day Charge')\n",
        "seaborn.boxplot(ax=axes[2, 1], data=data, x='churners',y='Eve Mins')\n",
        "seaborn.boxplot(ax=axes[3, 0], data=data, x='churners',y='Eve Calls')\n",
        "seaborn.boxplot(ax=axes[3, 1], data=data, x='churners',y='Eve Charge')\n",
        "seaborn.boxplot(ax=axes[4, 0], data=data, x='churners',y='Night Mins')\n",
        "seaborn.boxplot(ax=axes[4, 1], data=data, x='churners',y='Night Calls')\n",
        "seaborn.boxplot(ax=axes[5, 0], data=data, x='churners',y='Night Charge')\n",
        "seaborn.boxplot(ax=axes[5, 1], data=data, x='churners',y='Intl Mins')\n",
        "seaborn.boxplot(ax=axes[6, 0], data=data, x='churners',y='Intl Calls')\n",
        "seaborn.boxplot(ax=axes[6, 1], data=data, x='churners',y='CustServ Calls')"
      ],
      "metadata": {
        "id": "jJEvHR1yiulk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualmente las variables VMail Message, Day Mins, Day Charge, Eve Calls, Eve Change, Night Mins, Intl Calls y CustServ Calls son las que presentan diferencias significativas. "
      ],
      "metadata": {
        "id": "92QDnalQizkl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(data[\"churners\"],data[\"State\"])"
      ],
      "metadata": {
        "id": "SQ7vLW5hi2PZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "fdd4e9ef-c1d4-4e5a-cb0e-d2a893fb04ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State     AK  AL  AR  AZ  CA  CO  CT  DC  DE  FL  ...  SD  TN  TX  UT  VA  VT  \\\n",
              "churners                                          ...                           \n",
              "0         49  72  44  60  25  57  62  49  52  55  ...  52  48  54  62  72  65   \n",
              "1          3   8  11   4   9   9  12   5   9   8  ...   8   5  18  10   5   8   \n",
              "\n",
              "State     WA  WI  WV  WY  \n",
              "churners                  \n",
              "0         52  71  96  68  \n",
              "1         14   7  10   9  \n",
              "\n",
              "[2 rows x 51 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8796add4-68bf-40bf-beb3-73cd2f04ab0e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>State</th>\n",
              "      <th>AK</th>\n",
              "      <th>AL</th>\n",
              "      <th>AR</th>\n",
              "      <th>AZ</th>\n",
              "      <th>CA</th>\n",
              "      <th>CO</th>\n",
              "      <th>CT</th>\n",
              "      <th>DC</th>\n",
              "      <th>DE</th>\n",
              "      <th>FL</th>\n",
              "      <th>...</th>\n",
              "      <th>SD</th>\n",
              "      <th>TN</th>\n",
              "      <th>TX</th>\n",
              "      <th>UT</th>\n",
              "      <th>VA</th>\n",
              "      <th>VT</th>\n",
              "      <th>WA</th>\n",
              "      <th>WI</th>\n",
              "      <th>WV</th>\n",
              "      <th>WY</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>churners</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49</td>\n",
              "      <td>72</td>\n",
              "      <td>44</td>\n",
              "      <td>60</td>\n",
              "      <td>25</td>\n",
              "      <td>57</td>\n",
              "      <td>62</td>\n",
              "      <td>49</td>\n",
              "      <td>52</td>\n",
              "      <td>55</td>\n",
              "      <td>...</td>\n",
              "      <td>52</td>\n",
              "      <td>48</td>\n",
              "      <td>54</td>\n",
              "      <td>62</td>\n",
              "      <td>72</td>\n",
              "      <td>65</td>\n",
              "      <td>52</td>\n",
              "      <td>71</td>\n",
              "      <td>96</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>14</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 51 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8796add4-68bf-40bf-beb3-73cd2f04ab0e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8796add4-68bf-40bf-beb3-73cd2f04ab0e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8796add4-68bf-40bf-beb3-73cd2f04ab0e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:,1]"
      ],
      "metadata": {
        "id": "GJ4jswY3i63L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0b22d714-5868-4316-ad33-eaa8f64a6334"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1400    115\n",
              "1080    114\n",
              "3290    127\n",
              "2513     86\n",
              "488     165\n",
              "       ... \n",
              "535     194\n",
              "2816    130\n",
              "1816     53\n",
              "314     128\n",
              "115      36\n",
              "Name: Account Length, Length: 3333, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.corr()"
      ],
      "metadata": {
        "id": "8zvwg1Afi7Oz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 739
        },
        "outputId": "3a3f8304-84d5-4c79-c3aa-9dc527a44cde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Account Length  Area Code  VMail Message  Day Mins  Day Calls  \\\n",
              "Account Length        1.000000  -0.012463      -0.004628  0.006216   0.038470   \n",
              "Area Code            -0.012463   1.000000      -0.001994 -0.008264  -0.009646   \n",
              "VMail Message        -0.004628  -0.001994       1.000000  0.000778  -0.009548   \n",
              "Day Mins              0.006216  -0.008264       0.000778  1.000000   0.006750   \n",
              "Day Calls             0.038470  -0.009646      -0.009548  0.006750   1.000000   \n",
              "Day Charge            0.006214  -0.008264       0.000776  1.000000   0.006753   \n",
              "Eve Mins             -0.006757   0.003580       0.017562  0.007043  -0.021451   \n",
              "Eve Calls             0.019260  -0.011886      -0.005864  0.015769   0.006462   \n",
              "Eve Charge           -0.006745   0.003607       0.017578  0.007029  -0.021449   \n",
              "Night Mins           -0.008955  -0.005825       0.007681  0.004323   0.022938   \n",
              "Night Calls          -0.013176   0.016522       0.007123  0.022972  -0.019557   \n",
              "Night Charge         -0.008960  -0.005845       0.007663  0.004300   0.022927   \n",
              "Intl Mins             0.009514  -0.018288       0.002856 -0.010155   0.021565   \n",
              "Intl Calls            0.020661  -0.024179       0.013957  0.008033   0.004574   \n",
              "Intl Charge           0.009546  -0.018395       0.002884 -0.010092   0.021666   \n",
              "CustServ Calls       -0.003796   0.027572      -0.013263 -0.013423  -0.018942   \n",
              "churners              0.016541   0.006174      -0.089728  0.205151   0.018459   \n",
              "churners_pred              NaN        NaN            NaN       NaN        NaN   \n",
              "\n",
              "                Day Charge  Eve Mins  Eve Calls  Eve Charge  Night Mins  \\\n",
              "Account Length    0.006214 -0.006757   0.019260   -0.006745   -0.008955   \n",
              "Area Code        -0.008264  0.003580  -0.011886    0.003607   -0.005825   \n",
              "VMail Message     0.000776  0.017562  -0.005864    0.017578    0.007681   \n",
              "Day Mins          1.000000  0.007043   0.015769    0.007029    0.004323   \n",
              "Day Calls         0.006753 -0.021451   0.006462   -0.021449    0.022938   \n",
              "Day Charge        1.000000  0.007050   0.015769    0.007036    0.004324   \n",
              "Eve Mins          0.007050  1.000000  -0.011430    1.000000   -0.012584   \n",
              "Eve Calls         0.015769 -0.011430   1.000000   -0.011423   -0.002093   \n",
              "Eve Charge        0.007036  1.000000  -0.011423    1.000000   -0.012592   \n",
              "Night Mins        0.004324 -0.012584  -0.002093   -0.012592    1.000000   \n",
              "Night Calls       0.022972  0.007586   0.007710    0.007596    0.011204   \n",
              "Night Charge      0.004301 -0.012593  -0.002056   -0.012601    0.999999   \n",
              "Intl Mins        -0.010157 -0.011035   0.008703   -0.011043   -0.015207   \n",
              "Intl Calls        0.008032  0.002541   0.017434    0.002541   -0.012353   \n",
              "Intl Charge      -0.010094 -0.011067   0.008674   -0.011074   -0.015180   \n",
              "CustServ Calls   -0.013427 -0.012985   0.002423   -0.012987   -0.009288   \n",
              "churners          0.205151  0.092796   0.009233    0.092786    0.035493   \n",
              "churners_pred          NaN       NaN        NaN         NaN         NaN   \n",
              "\n",
              "                Night Calls  Night Charge  Intl Mins  Intl Calls  Intl Charge  \\\n",
              "Account Length    -0.013176     -0.008960   0.009514    0.020661     0.009546   \n",
              "Area Code          0.016522     -0.005845  -0.018288   -0.024179    -0.018395   \n",
              "VMail Message      0.007123      0.007663   0.002856    0.013957     0.002884   \n",
              "Day Mins           0.022972      0.004300  -0.010155    0.008033    -0.010092   \n",
              "Day Calls         -0.019557      0.022927   0.021565    0.004574     0.021666   \n",
              "Day Charge         0.022972      0.004301  -0.010157    0.008032    -0.010094   \n",
              "Eve Mins           0.007586     -0.012593  -0.011035    0.002541    -0.011067   \n",
              "Eve Calls          0.007710     -0.002056   0.008703    0.017434     0.008674   \n",
              "Eve Charge         0.007596     -0.012601  -0.011043    0.002541    -0.011074   \n",
              "Night Mins         0.011204      0.999999  -0.015207   -0.012353    -0.015180   \n",
              "Night Calls        1.000000      0.011188  -0.013605    0.000305    -0.013630   \n",
              "Night Charge       0.011188      1.000000  -0.015214   -0.012329    -0.015186   \n",
              "Intl Mins         -0.013605     -0.015214   1.000000    0.032304     0.999993   \n",
              "Intl Calls         0.000305     -0.012329   0.032304    1.000000     0.032372   \n",
              "Intl Charge       -0.013630     -0.015186   0.999993    0.032372     1.000000   \n",
              "CustServ Calls    -0.012802     -0.009277  -0.009640   -0.017561    -0.009675   \n",
              "churners           0.006141      0.035496   0.068239   -0.052844     0.068259   \n",
              "churners_pred           NaN           NaN        NaN         NaN          NaN   \n",
              "\n",
              "                CustServ Calls  churners  churners_pred  \n",
              "Account Length       -0.003796  0.016541            NaN  \n",
              "Area Code             0.027572  0.006174            NaN  \n",
              "VMail Message        -0.013263 -0.089728            NaN  \n",
              "Day Mins             -0.013423  0.205151            NaN  \n",
              "Day Calls            -0.018942  0.018459            NaN  \n",
              "Day Charge           -0.013427  0.205151            NaN  \n",
              "Eve Mins             -0.012985  0.092796            NaN  \n",
              "Eve Calls             0.002423  0.009233            NaN  \n",
              "Eve Charge           -0.012987  0.092786            NaN  \n",
              "Night Mins           -0.009288  0.035493            NaN  \n",
              "Night Calls          -0.012802  0.006141            NaN  \n",
              "Night Charge         -0.009277  0.035496            NaN  \n",
              "Intl Mins            -0.009640  0.068239            NaN  \n",
              "Intl Calls           -0.017561 -0.052844            NaN  \n",
              "Intl Charge          -0.009675  0.068259            NaN  \n",
              "CustServ Calls        1.000000  0.208750            NaN  \n",
              "churners              0.208750  1.000000            NaN  \n",
              "churners_pred              NaN       NaN            NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d554608-5e7f-40d9-a8b4-f27b83336ac2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>Eve Mins</th>\n",
              "      <th>Eve Calls</th>\n",
              "      <th>Eve Charge</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>churners</th>\n",
              "      <th>churners_pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Account Length</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.012463</td>\n",
              "      <td>-0.004628</td>\n",
              "      <td>0.006216</td>\n",
              "      <td>0.038470</td>\n",
              "      <td>0.006214</td>\n",
              "      <td>-0.006757</td>\n",
              "      <td>0.019260</td>\n",
              "      <td>-0.006745</td>\n",
              "      <td>-0.008955</td>\n",
              "      <td>-0.013176</td>\n",
              "      <td>-0.008960</td>\n",
              "      <td>0.009514</td>\n",
              "      <td>0.020661</td>\n",
              "      <td>0.009546</td>\n",
              "      <td>-0.003796</td>\n",
              "      <td>0.016541</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Area Code</th>\n",
              "      <td>-0.012463</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.001994</td>\n",
              "      <td>-0.008264</td>\n",
              "      <td>-0.009646</td>\n",
              "      <td>-0.008264</td>\n",
              "      <td>0.003580</td>\n",
              "      <td>-0.011886</td>\n",
              "      <td>0.003607</td>\n",
              "      <td>-0.005825</td>\n",
              "      <td>0.016522</td>\n",
              "      <td>-0.005845</td>\n",
              "      <td>-0.018288</td>\n",
              "      <td>-0.024179</td>\n",
              "      <td>-0.018395</td>\n",
              "      <td>0.027572</td>\n",
              "      <td>0.006174</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VMail Message</th>\n",
              "      <td>-0.004628</td>\n",
              "      <td>-0.001994</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000778</td>\n",
              "      <td>-0.009548</td>\n",
              "      <td>0.000776</td>\n",
              "      <td>0.017562</td>\n",
              "      <td>-0.005864</td>\n",
              "      <td>0.017578</td>\n",
              "      <td>0.007681</td>\n",
              "      <td>0.007123</td>\n",
              "      <td>0.007663</td>\n",
              "      <td>0.002856</td>\n",
              "      <td>0.013957</td>\n",
              "      <td>0.002884</td>\n",
              "      <td>-0.013263</td>\n",
              "      <td>-0.089728</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day Mins</th>\n",
              "      <td>0.006216</td>\n",
              "      <td>-0.008264</td>\n",
              "      <td>0.000778</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.006750</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.007043</td>\n",
              "      <td>0.015769</td>\n",
              "      <td>0.007029</td>\n",
              "      <td>0.004323</td>\n",
              "      <td>0.022972</td>\n",
              "      <td>0.004300</td>\n",
              "      <td>-0.010155</td>\n",
              "      <td>0.008033</td>\n",
              "      <td>-0.010092</td>\n",
              "      <td>-0.013423</td>\n",
              "      <td>0.205151</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day Calls</th>\n",
              "      <td>0.038470</td>\n",
              "      <td>-0.009646</td>\n",
              "      <td>-0.009548</td>\n",
              "      <td>0.006750</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.006753</td>\n",
              "      <td>-0.021451</td>\n",
              "      <td>0.006462</td>\n",
              "      <td>-0.021449</td>\n",
              "      <td>0.022938</td>\n",
              "      <td>-0.019557</td>\n",
              "      <td>0.022927</td>\n",
              "      <td>0.021565</td>\n",
              "      <td>0.004574</td>\n",
              "      <td>0.021666</td>\n",
              "      <td>-0.018942</td>\n",
              "      <td>0.018459</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day Charge</th>\n",
              "      <td>0.006214</td>\n",
              "      <td>-0.008264</td>\n",
              "      <td>0.000776</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.006753</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.007050</td>\n",
              "      <td>0.015769</td>\n",
              "      <td>0.007036</td>\n",
              "      <td>0.004324</td>\n",
              "      <td>0.022972</td>\n",
              "      <td>0.004301</td>\n",
              "      <td>-0.010157</td>\n",
              "      <td>0.008032</td>\n",
              "      <td>-0.010094</td>\n",
              "      <td>-0.013427</td>\n",
              "      <td>0.205151</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eve Mins</th>\n",
              "      <td>-0.006757</td>\n",
              "      <td>0.003580</td>\n",
              "      <td>0.017562</td>\n",
              "      <td>0.007043</td>\n",
              "      <td>-0.021451</td>\n",
              "      <td>0.007050</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.011430</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.012584</td>\n",
              "      <td>0.007586</td>\n",
              "      <td>-0.012593</td>\n",
              "      <td>-0.011035</td>\n",
              "      <td>0.002541</td>\n",
              "      <td>-0.011067</td>\n",
              "      <td>-0.012985</td>\n",
              "      <td>0.092796</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eve Calls</th>\n",
              "      <td>0.019260</td>\n",
              "      <td>-0.011886</td>\n",
              "      <td>-0.005864</td>\n",
              "      <td>0.015769</td>\n",
              "      <td>0.006462</td>\n",
              "      <td>0.015769</td>\n",
              "      <td>-0.011430</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.011423</td>\n",
              "      <td>-0.002093</td>\n",
              "      <td>0.007710</td>\n",
              "      <td>-0.002056</td>\n",
              "      <td>0.008703</td>\n",
              "      <td>0.017434</td>\n",
              "      <td>0.008674</td>\n",
              "      <td>0.002423</td>\n",
              "      <td>0.009233</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eve Charge</th>\n",
              "      <td>-0.006745</td>\n",
              "      <td>0.003607</td>\n",
              "      <td>0.017578</td>\n",
              "      <td>0.007029</td>\n",
              "      <td>-0.021449</td>\n",
              "      <td>0.007036</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.011423</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.012592</td>\n",
              "      <td>0.007596</td>\n",
              "      <td>-0.012601</td>\n",
              "      <td>-0.011043</td>\n",
              "      <td>0.002541</td>\n",
              "      <td>-0.011074</td>\n",
              "      <td>-0.012987</td>\n",
              "      <td>0.092786</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Night Mins</th>\n",
              "      <td>-0.008955</td>\n",
              "      <td>-0.005825</td>\n",
              "      <td>0.007681</td>\n",
              "      <td>0.004323</td>\n",
              "      <td>0.022938</td>\n",
              "      <td>0.004324</td>\n",
              "      <td>-0.012584</td>\n",
              "      <td>-0.002093</td>\n",
              "      <td>-0.012592</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.011204</td>\n",
              "      <td>0.999999</td>\n",
              "      <td>-0.015207</td>\n",
              "      <td>-0.012353</td>\n",
              "      <td>-0.015180</td>\n",
              "      <td>-0.009288</td>\n",
              "      <td>0.035493</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Night Calls</th>\n",
              "      <td>-0.013176</td>\n",
              "      <td>0.016522</td>\n",
              "      <td>0.007123</td>\n",
              "      <td>0.022972</td>\n",
              "      <td>-0.019557</td>\n",
              "      <td>0.022972</td>\n",
              "      <td>0.007586</td>\n",
              "      <td>0.007710</td>\n",
              "      <td>0.007596</td>\n",
              "      <td>0.011204</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.011188</td>\n",
              "      <td>-0.013605</td>\n",
              "      <td>0.000305</td>\n",
              "      <td>-0.013630</td>\n",
              "      <td>-0.012802</td>\n",
              "      <td>0.006141</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Night Charge</th>\n",
              "      <td>-0.008960</td>\n",
              "      <td>-0.005845</td>\n",
              "      <td>0.007663</td>\n",
              "      <td>0.004300</td>\n",
              "      <td>0.022927</td>\n",
              "      <td>0.004301</td>\n",
              "      <td>-0.012593</td>\n",
              "      <td>-0.002056</td>\n",
              "      <td>-0.012601</td>\n",
              "      <td>0.999999</td>\n",
              "      <td>0.011188</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.015214</td>\n",
              "      <td>-0.012329</td>\n",
              "      <td>-0.015186</td>\n",
              "      <td>-0.009277</td>\n",
              "      <td>0.035496</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Intl Mins</th>\n",
              "      <td>0.009514</td>\n",
              "      <td>-0.018288</td>\n",
              "      <td>0.002856</td>\n",
              "      <td>-0.010155</td>\n",
              "      <td>0.021565</td>\n",
              "      <td>-0.010157</td>\n",
              "      <td>-0.011035</td>\n",
              "      <td>0.008703</td>\n",
              "      <td>-0.011043</td>\n",
              "      <td>-0.015207</td>\n",
              "      <td>-0.013605</td>\n",
              "      <td>-0.015214</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.032304</td>\n",
              "      <td>0.999993</td>\n",
              "      <td>-0.009640</td>\n",
              "      <td>0.068239</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Intl Calls</th>\n",
              "      <td>0.020661</td>\n",
              "      <td>-0.024179</td>\n",
              "      <td>0.013957</td>\n",
              "      <td>0.008033</td>\n",
              "      <td>0.004574</td>\n",
              "      <td>0.008032</td>\n",
              "      <td>0.002541</td>\n",
              "      <td>0.017434</td>\n",
              "      <td>0.002541</td>\n",
              "      <td>-0.012353</td>\n",
              "      <td>0.000305</td>\n",
              "      <td>-0.012329</td>\n",
              "      <td>0.032304</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.032372</td>\n",
              "      <td>-0.017561</td>\n",
              "      <td>-0.052844</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Intl Charge</th>\n",
              "      <td>0.009546</td>\n",
              "      <td>-0.018395</td>\n",
              "      <td>0.002884</td>\n",
              "      <td>-0.010092</td>\n",
              "      <td>0.021666</td>\n",
              "      <td>-0.010094</td>\n",
              "      <td>-0.011067</td>\n",
              "      <td>0.008674</td>\n",
              "      <td>-0.011074</td>\n",
              "      <td>-0.015180</td>\n",
              "      <td>-0.013630</td>\n",
              "      <td>-0.015186</td>\n",
              "      <td>0.999993</td>\n",
              "      <td>0.032372</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.009675</td>\n",
              "      <td>0.068259</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustServ Calls</th>\n",
              "      <td>-0.003796</td>\n",
              "      <td>0.027572</td>\n",
              "      <td>-0.013263</td>\n",
              "      <td>-0.013423</td>\n",
              "      <td>-0.018942</td>\n",
              "      <td>-0.013427</td>\n",
              "      <td>-0.012985</td>\n",
              "      <td>0.002423</td>\n",
              "      <td>-0.012987</td>\n",
              "      <td>-0.009288</td>\n",
              "      <td>-0.012802</td>\n",
              "      <td>-0.009277</td>\n",
              "      <td>-0.009640</td>\n",
              "      <td>-0.017561</td>\n",
              "      <td>-0.009675</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.208750</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>churners</th>\n",
              "      <td>0.016541</td>\n",
              "      <td>0.006174</td>\n",
              "      <td>-0.089728</td>\n",
              "      <td>0.205151</td>\n",
              "      <td>0.018459</td>\n",
              "      <td>0.205151</td>\n",
              "      <td>0.092796</td>\n",
              "      <td>0.009233</td>\n",
              "      <td>0.092786</td>\n",
              "      <td>0.035493</td>\n",
              "      <td>0.006141</td>\n",
              "      <td>0.035496</td>\n",
              "      <td>0.068239</td>\n",
              "      <td>-0.052844</td>\n",
              "      <td>0.068259</td>\n",
              "      <td>0.208750</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>churners_pred</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d554608-5e7f-40d9-a8b4-f27b83336ac2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2d554608-5e7f-40d9-a8b4-f27b83336ac2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2d554608-5e7f-40d9-a8b4-f27b83336ac2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dadas las correlaciones presentadas respecto a la variable de interes y teniendo en cuenta que las variables deben ser independientes es decir con correlaciones bajas, se presenta que la variable Intl Charge, Day Charge y CustServ Calls son escogidas en base a criterio de lo antes presentado."
      ],
      "metadata": {
        "id": "vvh7Fo9IjAkT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "logreg2 = LogisticRegression(solver='liblinear',C=1e9)\n",
        "feature_cols = ['Intl Charge','Day Charge','CustServ Calls']\n",
        "X = data[feature_cols]\n",
        "y = data.churners\n",
        "logreg2.fit(X, y)\n",
        "data['churners_pred2'] = logreg2.predict(X)\n",
        "data.head()"
      ],
      "metadata": {
        "id": "WuXwTtRSjBF5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "outputId": "b6f6224e-3cdf-42f5-c25e-d1a33aab1658"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     State  Account Length  Area Code     Phone Int'l Plan VMail Plan  \\\n",
              "1400    VA             115        415  367-3971         no         no   \n",
              "1080    OH             114        415  363-2602         no         no   \n",
              "3290    CA             127        510  388-4331         no         no   \n",
              "2513    NY              86        510  387-2041         no         no   \n",
              "488     VT             165        510  345-1998         no         no   \n",
              "\n",
              "      VMail Message  Day Mins  Day Calls  Day Charge  ...  Night Calls  \\\n",
              "1400              0     132.0         90       22.44  ...          114   \n",
              "1080              0     191.5         88       32.56  ...          118   \n",
              "3290              0     107.9        128       18.34  ...           95   \n",
              "2513              0      70.7        125       12.02  ...          107   \n",
              "488               0     242.9        126       41.29  ...          126   \n",
              "\n",
              "      Night Charge  Intl Mins  Intl Calls  Intl Charge  CustServ Calls  \\\n",
              "1400          7.91        0.0           0          0.0               3   \n",
              "1080          9.91        0.0           0          0.0               0   \n",
              "3290          9.83        0.0           0          0.0               0   \n",
              "2513          7.86        0.0           0          0.0               2   \n",
              "488          10.28        0.0           0          0.0               1   \n",
              "\n",
              "      Churn?  churners  churners_pred  churners_pred2  \n",
              "1400  False.         0              0               0  \n",
              "1080  False.         0              0               0  \n",
              "3290  False.         0              0               0  \n",
              "2513  False.         0              0               0  \n",
              "488   False.         0              0               0  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a623dbd3-8bef-44fe-aa5f-d880454790d0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>Phone</th>\n",
              "      <th>Int'l Plan</th>\n",
              "      <th>VMail Plan</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>...</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "      <th>Churn?</th>\n",
              "      <th>churners</th>\n",
              "      <th>churners_pred</th>\n",
              "      <th>churners_pred2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1400</th>\n",
              "      <td>VA</td>\n",
              "      <td>115</td>\n",
              "      <td>415</td>\n",
              "      <td>367-3971</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>90</td>\n",
              "      <td>22.44</td>\n",
              "      <td>...</td>\n",
              "      <td>114</td>\n",
              "      <td>7.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1080</th>\n",
              "      <td>OH</td>\n",
              "      <td>114</td>\n",
              "      <td>415</td>\n",
              "      <td>363-2602</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>191.5</td>\n",
              "      <td>88</td>\n",
              "      <td>32.56</td>\n",
              "      <td>...</td>\n",
              "      <td>118</td>\n",
              "      <td>9.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3290</th>\n",
              "      <td>CA</td>\n",
              "      <td>127</td>\n",
              "      <td>510</td>\n",
              "      <td>388-4331</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>107.9</td>\n",
              "      <td>128</td>\n",
              "      <td>18.34</td>\n",
              "      <td>...</td>\n",
              "      <td>95</td>\n",
              "      <td>9.83</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2513</th>\n",
              "      <td>NY</td>\n",
              "      <td>86</td>\n",
              "      <td>510</td>\n",
              "      <td>387-2041</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>70.7</td>\n",
              "      <td>125</td>\n",
              "      <td>12.02</td>\n",
              "      <td>...</td>\n",
              "      <td>107</td>\n",
              "      <td>7.86</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>VT</td>\n",
              "      <td>165</td>\n",
              "      <td>510</td>\n",
              "      <td>345-1998</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>242.9</td>\n",
              "      <td>126</td>\n",
              "      <td>41.29</td>\n",
              "      <td>...</td>\n",
              "      <td>126</td>\n",
              "      <td>10.28</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>False.</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a623dbd3-8bef-44fe-aa5f-d880454790d0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a623dbd3-8bef-44fe-aa5f-d880454790d0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a623dbd3-8bef-44fe-aa5f-d880454790d0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Variable real:\")\n",
        "print(np.array(np.unique(data['churners'], return_counts=True)).T)\n",
        "print(\"Variable predicha:\" )\n",
        "print(np.array(np.unique(data['churners_pred2'], return_counts=True)).T)"
      ],
      "metadata": {
        "id": "txNZKzbdjGx_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9955e98-8be6-459f-ded1-79f99bfd47d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variable real:\n",
            "[[   0 2850]\n",
            " [   1  483]]\n",
            "Variable predicha:\n",
            "[[   0 3282]\n",
            " [   1   51]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Coeficientes"
      ],
      "metadata": {
        "id": "Jf1LamTbjIyi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "logreg2.coef_"
      ],
      "metadata": {
        "id": "aOxXvA7KjKC3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0192c36d-d4e9-419b-a24c-a4a4960f1ff9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.31066447, 0.07212458, 0.43509873]])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logreg2.intercept_"
      ],
      "metadata": {
        "id": "WH39yjuajLxe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09ccd6f9-5688-4db3-b8b0-0c053049bbde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-5.78325979])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Teniendo en cuenta el orden de las variables 'Intl Charge','Day Charge','CustServ Calls', se tiene la interpretación: Para la primera variable es que en aumento de 1 unidad en \"Intl Charge\" se asocia con un aumento de 0.31066 unidades en las probabilidades logarítmicas de Churn. <BR> Para la segunda variable es que en aumento de 1 unidad en \"Day Charge\" se asocia con un aumento de 0.0721 unidades en las probabilidades logarítmicas de Churn y para la última variable se tiene que cuando se aumenta en 1 unidad la variable \"CustServ Calls\", se puede aumentar en 0.43509 unidades en las probabilidades logarítmicas de Churn."
      ],
      "metadata": {
        "id": "GngvI7_bjQ_n"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ejercicio 4.10\n",
        "\n",
        "Utilizando las 3 variables independientes del punto anterior, particione la base en training (90%) y validación (10%). Posterior, con la bases de training (90%) aplique un modelo de regresión logística usando K fold cross validation:\n",
        "* K = 2\n",
        "* K = 5\n",
        "* K = 10\n",
        "\n",
        "Calcule la precisión de test y la precisión de validación(10% restante) y compare los modelos."
      ],
      "metadata": {
        "id": "zb0Zb0Akb1Ry"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QUslBeW1lABj"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "feature_cols = ['Intl Charge','Day Charge','CustServ Calls']\n",
        "X = data[feature_cols]\n",
        "y = data.churners\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1234)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "modelo1 = LogisticRegression()\n",
        "modelo1.fit(X_train, y_train)\n",
        "# Crear el metodo K = 2\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "cv = KFold(n_splits=2, random_state=666, shuffle=True)"
      ],
      "metadata": {
        "id": "UK714PAOjebZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Estimar el modelo en cada uno de los k folds\n",
        "scores = cross_val_score(modelo1, X_train, y_train, scoring = 'precision', cv=cv, n_jobs=-1)\n",
        "print('Precisión K=2:', abs(np.mean(scores))) #Precision de la validación"
      ],
      "metadata": {
        "id": "Je8Yugzxjhrc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6fed695-0add-413e-a7bf-535f449f8db2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión K=2: 0.515625\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred1 = modelo1.predict(X_test)"
      ],
      "metadata": {
        "id": "WTW-ZgFFjjh5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "print(\"Precisión de test con k = 2: \", np.sqrt(metrics.accuracy_score(y_test, y_pred1)))"
      ],
      "metadata": {
        "id": "s4FEYDXxjllK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd8daef7-6b4a-436e-efc8-139ff6ae00b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión de test con k = 2:  0.922116804530535\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "k = 5"
      ],
      "metadata": {
        "id": "-H9rDPSojnK6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "modelo2 = LogisticRegression()\n",
        "modelo2.fit(X_train, y_train)\n",
        "# Crear el metodo K = 5\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "cv = KFold(n_splits=5, random_state=666, shuffle=True) "
      ],
      "metadata": {
        "id": "xVKs8SuTjoCd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scores = cross_val_score(modelo2, X_train, y_train, scoring = 'precision', cv=cv, n_jobs=-1)\n",
        "print('Precisión K=5:', np.mean(scores)) #Precision de la validación"
      ],
      "metadata": {
        "id": "sUNezznkjr9_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46c75e21-753a-48e2-96a7-5f8322d4ea04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión K=5: 0.47857142857142865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred2 = modelo1.predict(X_test)"
      ],
      "metadata": {
        "id": "wSjccvyPjuyM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "print(\"Precisión de test con k = 5: \", metrics.accuracy_score(y_test, y_pred2))"
      ],
      "metadata": {
        "id": "BM6uD3GHjw7O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed84ae52-f4bc-4a6c-c0de-eda4be4d2b67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión de test con k = 5:  0.8502994011976048\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "k = 10"
      ],
      "metadata": {
        "id": "Bz4NxlByjybB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "modelo3 = LogisticRegression()\n",
        "modelo3.fit(X_train, y_train)\n",
        "# Crear el metodo K = 10\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "cv = KFold(n_splits=10, random_state=666, shuffle=True) "
      ],
      "metadata": {
        "id": "5tV3B9O_jzT9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scores = cross_val_score(modelo3, X_train, y_train, scoring = 'precision', cv=cv, n_jobs=-1)\n",
        "print('Precisión K=10:', abs(np.mean(scores))) #Precision de la validación"
      ],
      "metadata": {
        "id": "vnXnP_WVj1ln",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a692599-3d7c-42d4-a823-c4fbaeeb4ca5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión K=10: 0.4652380952380952\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred3 = modelo1.predict(X_test)"
      ],
      "metadata": {
        "id": "crWq_E7Ej3SA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "print(\"Precisión de test con k = 10: \", metrics.accuracy_score(y_test, y_pred3))"
      ],
      "metadata": {
        "id": "4jJrcWPWj4tG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1162dc1-5566-4d3a-f007-2b5636f98027"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precisión de test con k = 10:  0.8502994011976048\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dadas las metricas de precisión para el test y la validación se encuentra que se deberían tomar una validación cruzada se debe tomar un k fold igual a 2."
      ],
      "metadata": {
        "id": "JFlblg7K-_CA"
      }
    }
  ]
}